---
title: "Network Effects Fixed Point Analysis"
format: html
---
This notebook recreates work previously shared with the CAS team, but now in a more formal source code.
The model will continue to grow, expand, and improve as we add new features.
These cells will create some of the graphs used in the paper, presentations, and test the plotting functions.
```{r}
rm(list = ls())
source("./h2_adopt_model.R")
source("./h2_adopt_model_plots.R")

library(tidyverse)
```

### Define Calibrated Distribution of Airport Sizes

```{r}
# Define distribution of airport sizes
# Focusing on origin passenger miles and removing
# outliers (1.5 x interquartile range) we have
# the following, where Q_min is set artificially low
# since its close Q_min = 11.
Q_min <- 0.5
Q_max <-  85534859450 #1917009.00
Q_mean <- 999469355 # 197069.96
Q_mode <- 8683.595

# Gamma Distribution Parameters
# Current parameters from mode-mean calibration
theta = 1727595.34 #188386.36
k = 1.032609 #1.046095

pareto_cdf <- function(x, x_m = 2, a = 6){
    return(1 - (x_m/x)^a)
}

calibrated_pareto_cdf <- function(x) {
  return(pareto_cdf(x, Q_min, Q_mean/(Q_mean-Q_min)))
}

calibrated_gamma_pdf <- function(x) {
  dgamma(x, shape = k, scale = theta)
}

calibrated_gamma_cdf <- function(x) {
  pgamma(x, shape = k, scale = theta)
}
```


```{r}
# Set the model parameters using named vectors
calibrated_model_params <- data.frame(
      "p_h" = 1.2
    , "f_k_rev" = 0.00000002118861
    , "f_k_exp" = 0.00000001871368
    , "f_h_rev" = 1.0
    , "f_h_exp" = 1.0
    , "delta" = 0.04
    , "gamma" = 0.02
    , "x" = 173.75 
    , "c_x" = 0#2.7031
    , "eta" = 0.00000001425
    , "nu" = 0.1
    , "rho" = 0.5
    , "q_min" = Q_min
    , "q_max" = Q_max
    , "q_mean" = Q_mean
)

# Create Model List
model <- list(calibrated_model_params,
              calibrated_gamma_cdf)
names(model) <- c("model_params", "cdf")

#curve_data = data.frame("s" = seq(0.0, 1.0, 0.001))
#curve_data["ks"] = adoption_curve(curve_data["s"], my_model)
#ne_data = data.frame("ne"=nash_equilibria(curve_data["s"], my_model))
plot_df <- ne_plot_simple_data(model)
# Pass model parameters to plot function
ne_plot_simple(plot_df[[1]], plot_df[[2]], "test_plot.pdf")
```

```{r}
f_k_rev <- calibrated_model_params$f_k_rev
f_h_rev <- calibrated_model_params$f_h_rev
f_k_exp <- calibrated_model_params$f_k_exp
f_h_exp <- calibrated_model_params$f_h_exp
c_x <- calibrated_model_params$c_x
eta <- calibrated_model_params$eta
nu <- calibrated_model_params$nu
delta <- calibrated_model_params$delta
gamma <- calibrated_model_params$gamma
x <- calibrated_model_params$x

operating_profit <- (f_h_rev * f_k_rev) - (f_h_exp * f_k_exp)

s <- seq(0, 1, 0.01)
cutoff_denom_benefit <- ((f_h_rev * f_k_rev) - (f_h_exp * f_k_exp)) * alpha(s, model$model_params) * s
cutoff_denom_cost <- c_x * eta * nu * (delta - gamma)

denom <- cutoff_denom_benefit - cutoff_denom_cost
numer <- x * (delta - gamma)

param_test = data.frame("s"=s, 
                        "denom_B"=cutoff_denom_benefit,
                        "denom_C"=cutoff_denom_cost,
                        "denom"=denom,
                        "numer"=numer)
param_test["ratio"] = param_test$numer / param_test$denom
param_test["cutoff"] = adoption_cutoff(s, model$model_params)
param_test["adopt"] = 1 - calibrated_gamma_cdf(param_test$ratio)
```


```{r}
ggplot(param_test) + 
  geom_line(aes(x = s, y = denom_B), color = "green") +
  geom_line(aes(x = s, y = denom_C), color = "red")
```
```{r}
ggplot(filter(param_test, ratio >= 0)) +
  geom_line(aes(x = s, y = ratio), color = "blue") +
  geom_line(aes(x = s, y = cutoff), color = "red", linetype="dashed") +
  geom_hline(yintercept = Q_max)
```

```{r}
ggplot(filter(param_test, ratio>0 & ratio < Q_max)) +
  geom_line(aes(x = ratio, y = adopt))
```


```{r}
plot_df2 <- ne_plot_recursive_data(model)
ne_plot_recursive(plot_df2, model$model_params)
```


```{r}
?ne_plot_simple_data
```